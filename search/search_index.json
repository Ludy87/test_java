{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Your locally hosted one-stop-shop for all your PDF needs.</p> <p>What Stirling-PDF can do:</p>"},{"location":"#powerful-pdf-tools","title":"Powerful PDF Tools","text":"<ul> <li>Stirling PDF provides you with powerful tools to manage your PDF files. Merge, split, or convert your PDF files with ease.</li> </ul>"},{"location":"#secure-and-reliable","title":"Secure and Reliable","text":"<ul> <li>Your files' security is our priority. Stirling PDF does not maintain any files, tracking or data. It operates fully on your local machine, ensuring privacy and control over your data.</li> </ul>"},{"location":"#personalized-for-you","title":"Personalized for you","text":"<ul> <li>Stirling-PDF is designed with user-centricity in mind. The interface, App name and description is all customizable, letting you adjust the settings according to your preferences and needs.</li> </ul>"},{"location":"about/","title":"About","text":""},{"location":"about/#introduction-to-stirling-pdf","title":"Introduction to Stirling PDF","text":"<p>Stirling PDF is a robust, locally hosted, web-based platform for PDF manipulation, powered by Docker. It offers a comprehensive range of features, from basic functions like merging and splitting PDFs to advanced capabilities such as compression, OCR, and conversions.</p> <p>Although the application is open-source, the majority of development is done by a single developer in their spare time. If you appreciate this work, please consider donating to support its continued development!</p>"},{"location":"about/#benefits","title":"Benefits","text":""},{"location":"about/#privacy-comes-first","title":"Privacy comes first","text":"<p>Originally conceived as a ChatGPT-powered tool, Stirling PDF has evolved to meet a wide range of PDF-related needs. Crucially, the platform prioritizes privacy and security: it does not make outbound calls for tracking or record-keeping. All files and PDFs are handled on the client side or are temporarily stored on the server only during task execution. Once a file is downloaded, it is immediately removed from the server.</p>"},{"location":"about/#always-improving","title":"Always improving","text":"<p>Stirling PDF benefits from an active community that contributes ideas and helps with its open-source development. New features are regularly added, ensuring that Stirling PDF continually evolves.</p>"},{"location":"about/#options","title":"Options","text":"<p>Stirling-PDF is yours. You can modify and adapt it to fit your needs or those of your business. We offer various customization options and welcome feature requests and bug reports through our GitHub issues or Discord.</p>"},{"location":"contribute/","title":"Contributing","text":"<p>Thank you for your interest in contributing to Stirling-PDF! There are many ways to contribute other than writing code. For example, reporting bugs, creating suggestions, and adding or modifying translations.</p>"},{"location":"contribute/#issue-guidelines","title":"Issue Guidelines","text":"<p>Issues can be used to report bugs, request features, or ask questions. If you have a question, you could also ask us in our Discord.</p> <p>Before opening an issue, please check to make sure someone hasn't already opened an issue about it.</p>"},{"location":"contribute/#pull-requests","title":"Pull Requests","text":"<p>Before you start working on an issue, please comment on (or create) the issue and wait for it to be assigned to you. If someone has already been assigned but didn't have the time to work on it lately, please communicate with them and ask if they're still working on it. This is to avoid multiple people working on the same issue.</p> <p>Once you have been assigned an issue, you can start working on it. When you are ready to submit your changes, open a pull request. For a detailed pull request tutorial, see this guide.</p> <p>Please make sure your Pull Request adheres to the following guidelines:</p> <ul> <li>Use the PR template provided.</li> <li>Keep your Pull Request title succinct, detailed and to the point.</li> <li>Keep commits atomic. One commit should contain one change. If you want to make multiple changes, submit multiple Pull Requests.</li> <li>Commits should be clear, concise and easy to understand.</li> <li>References to the Issue number in the Pull Request and/or Commit message.</li> </ul>"},{"location":"contribute/#translations","title":"Translations","text":"<p>If you would like to add or modify a translation, please see How to add new languages to Stirling-PDF. Also, please create a Pull Request so others can use it!</p>"},{"location":"contribute/#docs","title":"Docs","text":"<p>Documentation for Stirling-PDF is handled in a separate repository. Please see Docs repository or use \"edit this page\"-button at the bottom of each page at https://stirlingtools.com/docs/.</p>"},{"location":"contribute/#fixing-bugs-or-adding-a-new-feature","title":"Fixing Bugs or Adding a New Feature","text":"<p>First, make sure you've read the section Pull Requests.</p> <p>To build from source, please follow this Guide.</p> <p>If, at any point of time, you have a question, please feel free to ask in the same issue thread or in our Discord.</p>"},{"location":"contribute/#license","title":"License","text":"<p>By contributing to this project, you agree that your contributions will be licensed under the LICENSE. You also acknowledge and agree that your contributions will be included in Stirling-PDF and that they can be relicensed in the future under the MPL 2.0 (Mozilla Public License Version 2.0) license.</p>"},{"location":"contribute/translation/","title":"How to add new languages to Stirling-PDF","text":"<p>Fork Stirling-PDF and make a new branch out of Main</p> <p>Then add reference to the language in the navbar by adding a new language entry to the dropdown languages.html and add a flag svg file to /flags.</p> <p>Any SVG flags are fine, i got most of mine from here If your language isn't represented by a flag just find whichever closely matches it, such as for Arabic i chose Saudi Arabia.</p>"},{"location":"contribute/translation/#for-example-to-add-polish-you-would-add","title":"For example to add Polish you would add","text":"<pre><code>&lt;a class=\"dropdown-item lang_dropdown-item\" href=\"\" data-language-code=\"pl_PL\"&gt;\n    &lt;img src=\"images/flags/pl.svg\" alt=\"icon\" width=\"20\" height=\"15\"&gt; Polski\n&lt;/a&gt;</code></pre> <p>The data-language-code is the code used to reference the file in the next step.</p> <p>Start by copying the existing english property file messages_en_GB.properties</p> <p>Copy and rename it to messages_{your data-language-code here}.properties, in the polish example you would set the name to <code>messages_pl_PL.properties</code></p> <p>Then simply translate all property entries within that file and make a PR into main for others to use!</p> <p>If you do not have a java IDE i am happy to verify the changes worked once you raise PR (but won't be able to verify the translations themselves)</p>"},{"location":"contribute/translation/#handling-untranslatable-strings","title":"Handling Untranslatable Strings","text":"<p>Sometimes, certain strings in the properties file may not require translation because they are the same in the target language or are universal (like names of protocols, certain terminologies, etc.). To ensure accurate statistics for language progress, these strings should be added to the ignore_translation.toml. This will exclude them from the translation progress calculations.</p> <p>For example, if the English string error=Error does not need translation in Polish, add it to the <code>ignore_translation.toml</code> under the Polish section:</p> <pre><code>[pl_PL]\nignore = [\n    \"language.direction\",  # Existing entries\n    \"error\"                # Add new entries here\n]</code></pre> <p>Make sure to place the entry under the correct language section. This helps maintain the accuracy of translation progress statistics and ensures that the translation tool or scripts do not misinterpret the completion rate.</p>"},{"location":"faq/highlights/","title":"What Stirling-PDF can do","text":""},{"location":"faq/highlights/#powerful-pdf-tools","title":"Powerful PDF Tools","text":"<ul> <li>Stirling PDF provides you with powerful tools to manage your PDF files. Merge, split, or convert your PDF files with ease.</li> </ul>"},{"location":"faq/highlights/#secure-and-reliable","title":"Secure and Reliable","text":"<ul> <li>Your files' security is our priority. Stirling PDF does not maintain any files, tracking or data. It operates fully on your local machine, ensuring privacy and control over your data.</li> </ul>"},{"location":"faq/highlights/#personalized-for-you","title":"Personalized for you","text":"<ul> <li>Stirling-PDF is designed with user-centricity in mind. The interface, App name and description is all customizable, letting you adjust the settings according to your preferences and needs.</li> </ul>"},{"location":"use/","title":"User documentation","text":"<p>Hi there!</p> <p>This is the beginning of the user documentation for Stirling-PDF.</p> <p>Use the sidebar to navigate this section.</p>"},{"location":"use/#getting-started-with-stirling-pdf","title":"Getting started with Stirling-PDF","text":"<p>New to Stirling-PDF? To get started with Stirling-PDF, follow these steps:</p>"},{"location":"use/docker-fat/","title":"Docker Fat","text":""},{"location":"use/docker-fat/#docker-run","title":"Docker Run","text":"<pre><code>docker run -d \\\n  -p 8080:8080 \\\n  -v ./trainingData:/usr/share/tessdata \\\n  -v ./extraConfigs:/configs \\\n  -v ./logs:/logs \\\n  -e DOCKER_ENABLE_SECURITY=true \\\n  -e SECURITY_ENABLELOGIN=true \\\n  -e INSTALL_BOOK_AND_ADVANCED_HTML_OPS=true \\\n  -e LANGS=en_GB \\\n  --name stirling-pdf \\\n  frooodle/s-pdf:latest-fat</code></pre> <p>Info</p> <p>Can also add these for customisation but are not required <pre><code>-v /location/of/customFiles:/customFiles \\</code></pre></p>"},{"location":"use/docker-fat/#docker-compose","title":"Docker Compose","text":"<pre><code>services:\n  stirling-pdf:\n    image: frooodle/s-pdf:latest-fat\n    ports:\n      - '8080:8080'\n    volumes:\n      - ./trainingData:/usr/share/tessdata  # Required for extra OCR languages\n      - ./extraConfigs:/configs\n      - ./logs:/logs/\n      # - ./customFiles:/customFiles/\n    environment:\n      - DOCKER_ENABLE_SECURITY=true\n      - SECURITY_ENABLELOGIN=true\n      - INSTALL_BOOK_AND_ADVANCED_HTML_OPS=false\n      - LANGS=en_GB</code></pre> <p>Note</p> <p>Podman is CLI-compatible with Docker, so simply replace \"docker\" with \"podman\".</p>"},{"location":"use/docker-ultra-lite/","title":"Docker Ultra Lite","text":""},{"location":"use/docker-ultra-lite/#docker-run","title":"Docker Run","text":"<pre><code>docker run -d \\\n  -p 8080:8080 \\\n  -v ./extraConfigs:/configs \\\n  -v ./logs:/logs \\\n  -e DOCKER_ENABLE_SECURITY=false \\\n  -e SECURITY_ENABLELOGIN=false \\\n  -e LANGS=en_GB \\\n  --name stirling-pdf \\\n  frooodle/s-pdf:latest-ultra-lite</code></pre> <p>Info</p> <p>Can also add these for customisation but are not required <pre><code>-v /location/of/customFiles:/customFiles \\</code></pre></p>"},{"location":"use/docker-ultra-lite/#docker-compose","title":"Docker Compose","text":"<pre><code>services:\n  stirling-pdf:\n    image: frooodle/s-pdf:latest-ultra-lite\n    ports:\n      - '8080:8080'\n    volumes:\n      - ./extraConfigs:/configs\n      - ./logs:/logs/\n      # - ./customFiles:/customFiles/\n    environment:\n      - DOCKER_ENABLE_SECURITY=false\n      - SECURITY_ENABLELOGIN=false\n      - LANGS=en_GB</code></pre> <p>Note</p> <p>Podman is CLI-compatible with Docker, so simply replace \"docker\" with \"podman\".</p>"},{"location":"use/docker/","title":"Docker Full","text":""},{"location":"use/docker/#docker-run","title":"Docker Run","text":"<pre><code>docker run -d \\\n  -p 8080:8080 \\\n  -v ./trainingData:/usr/share/tessdata \\\n  -v ./extraConfigs:/configs \\\n  -v ./logs:/logs \\\n  -e DOCKER_ENABLE_SECURITY=false \\\n  -e INSTALL_BOOK_AND_ADVANCED_HTML_OPS=false \\\n  -e LANGS=en_GB \\\n  --name stirling-pdf \\\n  frooodle/s-pdf:latest</code></pre> <p>Info</p> <p>Can also add these for customisation but are not required <pre><code>-v /location/of/customFiles:/customFiles \\</code></pre></p>"},{"location":"use/docker/#docker-compose","title":"Docker Compose","text":"<pre><code>services:\n  stirling-pdf:\n    image: frooodle/s-pdf:latest\n    ports:\n      - '8080:8080'\n    volumes:\n      - ./trainingData:/usr/share/tessdata  # Required for extra OCR languages\n      - ./extraConfigs:/configs\n      # - ./customFiles:/customFiles/\n      # - ./logs:/logs/\n    environment:\n      - DOCKER_ENABLE_SECURITY=false\n      - INSTALL_BOOK_AND_ADVANCED_HTML_OPS=false\n      - LANGS=en_GB</code></pre> <p>Note</p> <p>Podman is CLI-compatible with Docker, so simply replace \"docker\" with \"podman\".</p>"},{"location":"use/installation/unix_installation/","title":"Unix","text":"<p>To run the application without Docker/Podman, you will need to manually install all dependencies and build the necessary components.</p> <p>Note that some dependencies might not be available in the standard repositories of all Linux distributions, and may require additional steps to install.</p> <p>The following guide assumes you have a basic understanding of using a command line interface in your operating system.</p> <p>It should work on most Linux distributions and MacOS. For Windows, you might need to use Windows Subsystem for Linux (WSL) for certain steps. The amount of dependencies is to actually reduce overall size, ie installing LibreOffice sub components rather than full LibreOffice package.</p> <p>You could theoretically use a Distrobox/Toolbox, if your Distribution has old or not all Packages. But you might just as well use the Docker Container then.</p>"},{"location":"use/installation/unix_installation/#step-1-prerequisites","title":"Step 1: Prerequisites","text":"<p>Install the following software, if not already installed:</p> <ul> <li>Java 17 or later (21 recommended)</li> <li>Gradle 7.0 or later (included within repo so not needed on server)</li> <li>Git</li> <li>Python 3.8 (with pip)</li> <li>Make</li> <li>GCC/G++</li> <li>Automake</li> <li>Autoconf</li> <li>libtool</li> <li>pkg-config</li> <li>zlib1g-dev</li> <li>libleptonica-dev</li> </ul> <p>For Debian-based systems, you can use the following command:</p> <pre><code>sudo apt-get update\nsudo apt-get install -y git  automake  autoconf  libtool  libleptonica-dev  pkg-config zlib1g-dev make g++ openjdk-21-jdk python3 python3-pip</code></pre> <p>For Fedora-based systems use this command:</p> <pre><code>sudo dnf install -y git automake autoconf libtool leptonica-devel pkg-config zlib-devel make gcc-c++ java-21-openjdk python3 python3-pip</code></pre> <p>For non-root users with Nix Package Manager, use the following command:</p> <pre><code>nix-channel --update\nnix-env -iA nixpkgs.jdk21 nixpkgs.git nixpkgs.python38 nixpkgs.gnumake nixpkgs.libgcc nixpkgs.automake nixpkgs.autoconf nixpkgs.libtool nixpkgs.pkg-config nixpkgs.zlib nixpkgs.leptonica</code></pre>"},{"location":"use/installation/unix_installation/#step-2-clone-and-build-jbig2enc-only-required-for-certain-ocr-functionality","title":"Step 2: Clone and Build jbig2enc (Only required for certain OCR functionality)","text":"<p>For Debian and Fedora, you can build it from source using the following commands:</p> <pre><code>mkdir ~/.git\ncd ~/.git &amp;&amp;\\\ngit clone https://github.com/agl/jbig2enc.git &amp;&amp;\\\ncd jbig2enc &amp;&amp;\\\n./autogen.sh &amp;&amp;\\\n./configure &amp;&amp;\\\nmake &amp;&amp;\\\nsudo make install</code></pre> <p>For Nix, you will face <code>Leptonica not detected</code>. Bypass this by installing it directly using the following command:</p> <pre><code>nix-env -iA nixpkgs.jbig2enc</code></pre>"},{"location":"use/installation/unix_installation/#step-3-install-additional-software","title":"Step 3: Install Additional Software","text":"<p>Next we need to install LibreOffice for conversions, ocrmypdf for OCR, and opencv for pattern recognition functionality.</p> <p>Install the following software:</p> <ul> <li>libreoffice-core</li> <li>libreoffice-common</li> <li>libreoffice-writer</li> <li>libreoffice-calc</li> <li>libreoffice-impress</li> <li>python3-uno</li> <li>unoconv</li> <li>pngquant</li> <li>unpaper</li> <li>ocrmypdf</li> <li>opencv-python-headless</li> </ul> <p>For Debian-based systems, you can use the following command:</p> <pre><code>sudo apt-get install -y libreoffice-writer libreoffice-calc libreoffice-impress unpaper ocrmypdf\npip3 install uno opencv-python-headless unoconv pngquant WeasyPrint --break-system-packages</code></pre> <p>For Fedora:</p> <pre><code>sudo dnf install -y libreoffice-writer libreoffice-calc libreoffice-impress unpaper ocrmypdf\npip3 install uno opencv-python-headless unoconv pngquant WeasyPrint</code></pre> <p>For Nix:</p> <pre><code>nix-env -iA nixpkgs.unpaper nixpkgs.libreoffice nixpkgs.ocrmypdf nixpkgs.poppler_utils\npip3 install uno opencv-python-headless unoconv pngquant WeasyPrint</code></pre>"},{"location":"use/installation/unix_installation/#step-4-clone-and-build-stirling-pdf","title":"Step 4: Clone and Build Stirling-PDF","text":"<pre><code>cd ~/.git &amp;&amp;\\\ngit clone https://github.com/Stirling-Tools/Stirling-PDF.git &amp;&amp;\\\ncd Stirling-PDF &amp;&amp;\\\nchmod +x ./gradlew &amp;&amp;\\\n./gradlew build</code></pre>"},{"location":"use/installation/unix_installation/#step-5-move-jar-to-desired-location","title":"Step 5: Move jar to desired location","text":"<p>After the build process, a <code>.jar</code> file will be generated in the <code>build/libs</code> directory. You can move this file to a desired location, for example, <code>/opt/Stirling-PDF/</code>. You must also move the Script folder within the Stirling-PDF repo that you have downloaded to this directory. This folder is required for the python scripts using OpenCV.</p> <pre><code>sudo mkdir /opt/Stirling-PDF &amp;&amp;\\\nsudo mv ./build/libs/Stirling-PDF-*.jar /opt/Stirling-PDF/ &amp;&amp;\\\nsudo mv scripts /opt/Stirling-PDF/ &amp;&amp;\\\necho \"Scripts installed.\"</code></pre> <p>For non-root users, you can just keep the jar in the main directory of Stirling-PDF using the following command:</p> <pre><code>mv ./build/libs/Stirling-PDF-*.jar ./Stirling-PDF-*.jar</code></pre>"},{"location":"use/installation/unix_installation/#step-6-ocr-optional","title":"Step 6: OCR (Optional)","text":"<p>Info</p> <p>If you plan to use the OCR (Optical Character Recognition) functionality, you might need to install language packs for Tesseract if running non-english scanning.</p>"},{"location":"use/installation/unix_installation/#installing-language-packs","title":"Installing Language Packs","text":"<p>Easiest is to use the langpacks provided by your repositories. Skip the other steps.</p> <p>Manual:</p> <ol> <li>Download the desired language pack(s) by selecting the <code>.traineddata</code> file(s) for the language(s) you need.</li> <li>Place the <code>.traineddata</code> files in the Tesseract tessdata directory: <code>/usr/share/tessdata</code></li> <li>Please view  OCRmyPDF install guide for more info.</li> </ol> <p>Important</p> <p>DO NOT REMOVE EXISTING <code>eng.traineddata</code>, IT'S REQUIRED.</p> <p>Debian based systems, install languages with this command:</p> <pre><code>sudo apt update &amp;&amp;\\\n# All languages\n# sudo apt install -y 'tesseract-ocr-*'\n\n# Find languages:\napt search tesseract-ocr-\n\n# View installed languages:\ndpkg-query -W tesseract-ocr- | sed 's/tesseract-ocr-//g'</code></pre> <p>Fedora:</p> <pre><code># All languages\n# sudo dnf install -y tesseract-langpack-*\n\n# Find languages:\ndnf search -C tesseract-langpack-\n\n# View installed languages:\nrpm -qa | grep tesseract-langpack | sed 's/tesseract-langpack-//g'</code></pre> <p>Nix:</p> <pre><code>nix-env -iA nixpkgs.tesseract</code></pre> <p>Note</p> <p>Nix Package Manager pre-installs almost all the language packs when tesseract is installed.</p>"},{"location":"use/installation/unix_installation/#step-7-run-stirling-pdf","title":"Step 7: Run Stirling-PDF","text":"<p>Those who have pushed to the root directory, run the following commands:</p> <pre><code>./gradlew bootRun</code></pre> <p>or</p> <pre><code>java -jar /opt/Stirling-PDF/Stirling-PDF-*.jar</code></pre> <p>Since libreoffice, soffice, and conversion tools have their dbus_tmp_dir set as <code>dbus_tmp_dir=\"/run/user/$(id -u)/libreoffice-dbus\"</code>, you might get the following error when using their endpoints:</p> <pre><code>[Thread-7] INFO  s.s.SPDF.utils.ProcessExecutor - mkdir: cannot create directory \u2018/run/user/1501\u2019: Permission denied</code></pre> <p>To resolve this, before starting the Stirling-PDF, you have to set the environment variable to a directory you have write access to by using the following commands:</p> <pre><code>mkdir temp\nexport DBUS_SESSION_BUS_ADDRESS=\"unix:path=./temp\"</code></pre> <pre><code>./gradlew bootRun</code></pre> <p>or</p> <pre><code>java -jar ./Stirling-PDF-*.jar</code></pre>"},{"location":"use/installation/unix_installation/#step-8-adding-a-desktop-icon","title":"Step 8: Adding a Desktop icon","text":"<p>This will add a modified Appstarter to your Appmenu.</p> <pre><code>location=$(pwd)/gradlew\nimage=$(pwd)/docs/stirling-transparent.svg</code></pre> <pre><code>cat &gt; ~/.local/share/applications/Stirling-PDF.desktop &lt;&lt;EOF\n[Desktop Entry]\nName=Stirling PDF;\nGenericName=Launch StirlingPDF and open its WebGUI;\nCategory=Office;\nExec=xdg-open http://localhost:8080 &amp;&amp; nohup $location bootRun &amp;;\nIcon=$image;\nKeywords=pdf;\nType=Application;\nNoDisplay=false;\nTerminal=true;\nEOF</code></pre> <p>Note: Currently the app will run in the background until manually closed.</p>"},{"location":"use/installation/unix_installation/#optional-changing-the-host-and-port-of-the-application","title":"Optional: Changing the host and port of the application:","text":"<p>To override the default configuration, you can add the following to <code>/.git/Stirling-PDF/configs/custom_settings.yml</code> file:</p> <pre><code>server:\n  host: 0.0.0.0\n  port: 3000</code></pre> <p>Note: This file is created after the first application launch. To have it before that, you can create the directory and add the file yourself.</p>"},{"location":"use/installation/unix_installation/#optional-run-stirling-pdf-as-a-service-requires-root","title":"Optional: Run Stirling-PDF as a service (requires root).","text":"<p>First create a .env file, where you can store environment variables:</p> <pre><code>touch /opt/Stirling-PDF/.env</code></pre> <p>In this file you can add all variables, one variable per line, as stated in the main readme (for example SYSTEM_DEFAULTLOCALE=\"de-DE\").</p> <p>Create a new file where we store our service settings and open it with nano editor:</p> <pre><code>nano /etc/systemd/system/stirlingpdf.service</code></pre> <p>Paste this content, make sure to update the filename of the jar-file. Press Ctrl+S and Ctrl+X to save and exit the nano editor:</p> <pre><code>[Unit]\nDescription=Stirling-PDF service\nAfter=syslog.target network.target\n\n[Service]\nSuccessExitStatus=143\n\nUser=root\nGroup=root\n\nType=simple\n\nEnvironmentFile=/opt/Stirling-PDF/.env\nWorkingDirectory=/opt/Stirling-PDF\nExecStart=/usr/bin/java -jar Stirling-PDF-0.28.2.jar\nExecStop=/bin/kill -15 $MAINPID\n\n[Install]\nWantedBy=multi-user.target</code></pre> <p>Notify systemd that it has to rebuild its internal service database (you have to run this command every time you make a change in the service file):</p> <pre><code>sudo systemctl daemon-reload</code></pre> <p>Enable the service to tell the service to start it automatically:</p> <pre><code>sudo systemctl enable stirlingpdf.service</code></pre> <p>See the status of the service:</p> <pre><code>sudo systemctl status stirlingpdf.service</code></pre> <p>Manually start/stop/restart the service:</p> <pre><code>sudo systemctl start stirlingpdf.service\nsudo systemctl stop stirlingpdf.service\nsudo systemctl restart stirlingpdf.service</code></pre> <p>Remember to set the necessary environment variables before running the project if you want to customize the application the list can be seen in the main readme.</p> <p>You can do this in the terminal by using the <code>export</code> command or -D argument to java -jar command:</p> <pre><code>export APP_HOME_NAME=\"Stirling PDF\"</code></pre> <p>or</p> <pre><code>-DAPP_HOME_NAME=\"Stirling PDF\"</code></pre>"},{"location":"use/installation/windows_installation/","title":"Windows","text":"<p>Stirling PDF provides Windows compatibility through a downloadable .exe file, which can be obtained from here. This is a streamlined version of the application, offering the same capabilities as the Stirling-PDF-Ultra-lite found in Docker, but in a compact 80MB executable!</p> <p>Simply download and launch the .exe file to access the Stirling-PDF Web-UI. It is important to note that this application requires JAVA 17 or 21. If the application identifies that this version of JAVA isn't installed on your system, it will prompt a link to download the appropriate version.</p> <p>Once launched, the application hosts a web server that is accessible and usable by anyone on your network.</p>"}]}