name: "Build & Docker Test"

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  pull_request_review:
    types: [submitted]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write

    strategy:
      fail-fast: false
      matrix:
        jdk-version: [17] # , 21]

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@cb605e52c26070c328afc4562f0b4ada7618a84e # v2.10.4
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up JDK ${{ matrix.jdk-version }}
        uses: actions/setup-java@7a6d8a8234af8eb26422e24e3006232cccaa061b # v4.6.0
        with:
          java-version: ${{ matrix.jdk-version }}
          distribution: "temurin"

      - name: PR | Generate verification metadata with signatures and checksums for dependabot[bot]
        if: github.event.pull_request.user.login == 'dependabot[bot]'
        run: |
          ./gradlew clean dependencies buildEnvironment spotlessApply --write-verification-metadata sha256 --refresh-dependencies help
          ./gradlew clean dependencies buildEnvironment spotlessApply --write-verification-metadata sha256,pgp --refresh-keys --export-keys --refresh-dependencies help

      - name: Build with Gradle and no spring security
        id: build_without_security
        run: |
          ./gradlew clean build 2> >(tee gradle-error-${{ matrix.jdk-version }}-false.log >&2) || echo $? > gradle-exit-code-${{ matrix.jdk-version }}-false.txt
        env:
          DOCKER_ENABLE_SECURITY: false

      - name: Check Gradle Build Exit Code (no spring security)
        if: ${{ always() && steps.build_without_security.conclusion }}
        id: build_without_security_exit_code
        run: |
          if [ -f gradle-exit-code-${{ matrix.jdk-version }}-false.txt ]; then
            error_output=$(cat gradle-error-${{ matrix.jdk-version }}-false.log 2>/dev/null | tr '\n' ' ' | tr -d '\r' || echo "No error output captured.")
            echo "error_output_false=$error_output" >> $GITHUB_ENV
            exit_code=$(cat gradle-exit-code-${{ matrix.jdk-version }}-false.txt)
            exit ${exit_code:-1}
          fi

      - name: failure
        if: ${{ always() && steps.build_without_security_exit_code.conclusion == 'failure' }}
        run: |
          if echo "${{ env.error_output_false }}" | grep -q 'dependency-verification-report.html'; then
            echo "write_comment_without_security=true"
            echo "write_comment_without_security=true" >> $GITHUB_ENV
          else
            echo "write_comment_without_security=false"
            echo "write_comment_without_security=false" >> $GITHUB_ENV
          fi

      - name: Build with Gradle and with spring security
        id: build_with_security
        run: |
          ./gradlew clean build 2> >(tee gradle-error-${{ matrix.jdk-version }}-true.log >&2) || echo $? > gradle-exit-code-${{ matrix.jdk-version }}-true.txt
        env:
          DOCKER_ENABLE_SECURITY: true

      - name: Check Gradle Build Exit Code (no spring security)
        if: ${{ always() && steps.build_with_security.conclusion }}
        id: build_with_security_exit_code
        run: |
          if [ -f gradle-exit-code-${{ matrix.jdk-version }}-true.txt ]; then
            error_output=$(cat gradle-error-${{ matrix.jdk-version }}-true.log 2>/dev/null | tr '\n' ' ' | tr -d '\r' || echo "No error output captured.")
            echo "error_output_true=$error_output" >> $GITHUB_ENV
            exit_code=$(cat gradle-exit-code-${{ matrix.jdk-version }}-true.txt)
            exit ${exit_code:-1}
          fi

      - name: failure
        if: ${{ always() && steps.build_with_security_exit_code.conclusion == 'failure' }}
        run: |
          if echo "${{ env.error_output_true }}" | grep -q 'dependency-verification-report.html'; then
            echo "write_comment_with_security=true"
            echo "write_comment_with_security=true" >> $GITHUB_ENV
          else
            echo "write_comment_with_security=false"
            echo "write_comment_with_security=false" >> $GITHUB_ENV
          fi
      - name: PR | Post comment
        if: ${{ always() && github.event_name == 'pull_request' && ((steps.build_with_security_exit_code.conclusion == 'failure' && env.write_comment_with_security == 'true') || (steps.build_without_security_exit_code.conclusion == 'failure' && env.write_comment_without_security == 'true')) }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { GITHUB_REPOSITORY, SCRIPT_OUTPUT } = process.env;
            const [repoOwner, repoName] = GITHUB_REPOSITORY.split('/');
            const prNumber = context.issue.number;

            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: repoOwner,
              repo: repoName,
              issue_number: prNumber
            });

            const comment = comments.data.find(c => c.body.includes("ğŸš¨ **Gradle Build Failed** ğŸš¨"));

            // Only allow the action user to update comments
            const expectedActor = "github-actions[bot]";

            // Build the comment content
            let bodyComment = "ğŸš¨ **Gradle Build Failed** ğŸš¨\n\n";

            if (process.env.error_output_true) {
              bodyComment += "### Build with Spring Security:\n";
              bodyComment += "```\n" + process.env.error_output_true + "\n```\n\n";
            }

            if (process.env.error_output_false) {
              bodyComment += "### Build without Spring Security:\n";
              bodyComment += "```\n" + process.env.error_output_false + "\n```\n\n";
            }

            bodyComment += "For more details, refer to the [Dependency Management Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#managing-dependencies).\n";

            if (!comment && (process.env.error_output_true || process.env.error_output_false)) {
              // Create new comment if no existing comment is found
              await github.rest.issues.createComment({
                owner: repoOwner,
                repo: repoName,
                issue_number: prNumber,
                body: bodyComment
              });
              console.log("Created new comment.");
            } else if (comment && comment.user.login === expectedActor && (process.env.error_output_true || process.env.error_output_false)) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: repoOwner,
                repo: repoName,
                comment_id: comment.id,
                body: bodyComment
              });
              console.log("Updated existing comment.");
            } else if (comment && comment.user.login === expectedActor && !process.env.error_output_true && !process.env.error_output_false) {
              // deleted existing comment
              await github.rest.issues.deleteComment({
                owner: repoOwner,
                repo: repoName,
                comment_id: comment.id
              });
              console.log("Deleted existing comment.");
            } else {
              console.log("Comment update attempt denied. Actor does not match.");
            }

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: test-reports-jdk-${{ matrix.jdk-version }}
          path: |
            gradle-error-${{ matrix.jdk-version }}-true.log
            gradle-error-${{ matrix.jdk-version }}-false.log
            build/reports/tests/
            build/test-results/
            build/reports/problems/
          retention-days: 3

  write-comment:
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      pull-requests: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - jdk-version: 17
            docker_enable_security: true
          - jdk-version: 17
            docker_enable_security: false
          # - jdk-version: 21
          #   docker_enable_security: [true, false]

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@cb605e52c26070c328afc4562f0b4ada7618a84e # v2.10.4
        with:
          egress-policy: audit

      - name: Download build artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: test-reports-jdk-${{ matrix.jdk-version }}

      - id: error
        run: |
          if [ -f gradle-exit-code-${{ matrix.jdk-version }}-${{ matrix.docker_enable_security}}.txt ]; then
            cat gradle-error-${{ matrix.jdk-version }}-${{ matrix.docker_enable_security}}.log
            exit_code=$(cat gradle-exit-code-${{ matrix.jdk-version }}-${{ matrix.docker_enable_security}}.txt)
            exit ${exit_code:-1}
          fi

      - name: PR | Post comment
        if: ${{ always() && github.event_name == 'pull_request' && steps.error.conclusion }}
        run: |
          echo ${{ steps.error.conclusion }}
      #   uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      #   with:
      #     script: |
      #       const { GITHUB_REPOSITORY, SCRIPT_OUTPUT } = process.env;
      #       const [repoOwner, repoName] = GITHUB_REPOSITORY.split('/');
      #       const prNumber = context.issue.number;

      #       // Find existing comment
      #       const comments = await github.rest.issues.listComments({
      #         owner: repoOwner,
      #         repo: repoName,
      #         issue_number: prNumber
      #       });

      #       const comment = comments.data.find(c => c.body.includes("ğŸš¨ **Gradle Build Failed** ğŸš¨"));

      #       if (!comment) {
      #         // Create new comment if no existing comment is found
      #         await github.rest.issues.createComment({
      #           owner: repoOwner,
      #           repo: repoName,
      #           issue_number: prNumber,
      #           body: `ğŸš¨ **Gradle Build Failed** ğŸš¨

      #           Check: https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#managing-dependencies
      #           `
      #         });
      #         console.log("Created new comment.");
      #       } else {
      #         console.log("Comment update attempt denied. Actor does not match.");
      #       }

      # - name: PR | Delete comment
      #   if: env.FAIL_JOB == 'false' && github.event_name == 'pull_request'
      #   uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      #   with:
      #     script: |
      #       const { GITHUB_REPOSITORY, SCRIPT_OUTPUT } = process.env;
      #       const [repoOwner, repoName] = GITHUB_REPOSITORY.split('/');
      #       const prNumber = context.issue.number;

      #       // Find existing comment
      #       const comments = await github.rest.issues.listComments({
      #         owner: repoOwner,
      #         repo: repoName,
      #         issue_number: prNumber
      #       });

      #       const comment = comments.data.find(c => c.body.includes("ğŸš¨ **Gradle Build Failed** ğŸš¨"));

      #       // Only allow the action user to update comments
      #       const expectedActor = "github-actions[bot]";

      #       if (comment && comment.user.login === expectedActor) {
      #         // deleted existing comment
      #         await github.rest.issues.deleteComment({
      #           owner: repoOwner,
      #           repo: repoName,
      #           comment_id: comment.id
      #         });
      #         console.log("Deleted existing comment.");
      #       } else {
      #         console.log("Comment deleted attempt denied. Actor does not match.");
      #       }

      # - name: Fail job if errors found
      #   if: env.FAIL_JOB == 'true' || env.FAIL == 'true'
      #   run: |
      #     echo "Failing the job because errors were detected."
      #     exit 1

  docker-compose-tests:
    # if: github.event_name == 'push' && github.ref == 'refs/heads/main' ||
    #     (github.event_name == 'pull_request' &&
    #     contains(github.event.pull_request.labels.*.name, 'licenses') == false &&
    #     (
    #       contains(github.event.pull_request.labels.*.name, 'Front End') ||
    #       contains(github.event.pull_request.labels.*.name, 'Java') ||
    #       contains(github.event.pull_request.labels.*.name, 'Back End') ||
    #       contains(github.event.pull_request.labels.*.name, 'Security') ||
    #       contains(github.event.pull_request.labels.*.name, 'API') ||
    #       contains(github.event.pull_request.labels.*.name, 'Docker') ||
    #       contains(github.event.pull_request.labels.*.name, 'Test')
    #     )
    #     )

    runs-on: ubuntu-latest

    permissions:
      pull-requests: write

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@cb605e52c26070c328afc4562f0b4ada7618a84e # v2.10.4
        with:
          egress-policy: audit

      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Java 17
        uses: actions/setup-java@7a6d8a8234af8eb26422e24e3006232cccaa061b # v4.6.0
        with:
          java-version: "17"
          distribution: "adopt"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0

      - name: Install Docker Compose
        run: |
          sudo curl -SL "https://github.com/docker/compose/releases/download/v2.32.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: "3.12"
          cache: "pip" # caching pip dependencies

      - name: Pip requirements
        run: |
          pip install --require-hashes -r ./cucumber/requirements.txt

      - run: echo ${{ github.event.pull_request.user.login == 'dependabot[bot]' }}

      - name: Run Docker Compose Tests
        run: |
          # chmod +x ./cucumber/test_webpages.sh
          chmod +x ./test.sh
          ./test.sh "${{ github.event.pull_request.user.login == 'dependabot[bot]' }}"
